{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;SGOgB,yCAAO,CAAC,QAAQ,EAAE,CAAC;IACjC,KAAK,CAAC,GAAG,GAAG,wBAAU,CAAC,QAAQ,EAAE,CAAM,OAAE,EAAE;IAE3C,MAAM,CAAC,GAAG;AACZ,CAAC;SAEe,yCAAO,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAClC,KAAK,CAAC,EAAE,GAAG,4BAAc,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;IAC3C,KAAK,CAAC,MAAM,GAAG,4BAAc,CAAC,CAAa,cAAE,GAAG,EAAE,EAAE;IAEpD,KAAK,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAM,OAAE,CAAK;IAC5D,KAAK,CAAC,SAAS,GAAG,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAK;IAEzC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM;IAEtC,MAAM,CAAC,SAAS,GAAG,CAAG,KAAG,QAAQ,CAAC,QAAQ,CAAC,CAAK;AAClD,CAAC;SAEe,yCAAO,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAClC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAG,IAAE,CAAC;IACjC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAG,IAAE,CAAC;IAElC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAK;IAC5C,KAAK,CAAC,EAAE,GAAG,0CAAoB,CAAC,QAAQ;IAExC,KAAK,CAAC,MAAM,GAAG,8BAAgB,CAAC,CAAa,cAAE,GAAG,EAAE,EAAE;IAEtD,KAAK,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAK,MAAE,CAAM;IAC/C,KAAK,CAAC,SAAS,GAAG,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAM;IAE1C,MAAM,CAAC,SAAS;AAClB,CAAC;SAEQ,0CAAoB,CAAC,MAAM,EAAE,CAAC;IACrC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM;IACtC,GAAG,CAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAI,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC;IACvD,MAAM,CAAC,CAAC;AACV,CAAC;;;SDtCe,yCAAe,CAAC,IAAI,EAAE,CAAC;IACrC,EAAE,GAAG,iCAAE,CAAC,UAAU,CAAC,mCAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;QACvC,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,wEAAwE;QAEhF,OAAO,CAAC,IAAI,CAAC,CAAC;IAChB,CAAC;AACH,CAAC;SAEe,yCAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC3C,yCAAe,CAAC,IAAI;IAEpB,KAAK,CAAC,GAAG,GAAG,yCAAO,CAAC,QAAQ;IAC5B,KAAK,CAAC,QAAQ,GAAG,iCAAE,CAChB,YAAY,CAAC,mCAAI,CAAC,OAAO,CAAC,IAAI,GAC9B,QAAQ,GACR,KAAK,CAAC,CAAI,KAAE,CAAC;IAEhB,GAAG,CAAC,CAAC;QACH,KAAK,CAAC,MAAM,GAAG,yCAAO,CAAC,QAAQ,EAAE,GAAG;QACpC,EAAE,EAAE,MAAM,KAAK,CAAa,cAAE,KAAK,CAAC,GAAG,CAAC,KAAK;IAC/C,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,GAAG,CAAC,oCAAK,CAAC,oDAAoD;QACtE,OAAO,CAAC,IAAI,CAAC,CAAC;IAChB,CAAC;AACH,CAAC;SAEe,yCAAgB,GAAG,CAAC;IAClC,KAAK,CAAC,IAAI,GAAG,4BAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAK;AAC5B,CAAC;SAEe,wCAAY,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;IAC9D,KAAK,CAAC,aAAa,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC,GAAK,IAAI,CAAC,KAAK,CAAC,yCAAO,CAAC,CAAC,EAAE,GAAG;;IACpE,MAAM,CACJ,aAAa,CAAC,IAAI,EAAE,CAAC,GAAK,CAAC,CAAC,UAAU,IAAI,OAAO,CAAC,CAAC,EAAE,OAAO;SAAQ,IAAI;AAE5E,CAAC;SAEe,yCAAuB,CAAC,SAAS,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;IAChE,KAAK,CAAC,aAAa,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC,GAAK,IAAI,CAAC,KAAK,CAAC,yCAAO,CAAC,CAAC,EAAE,GAAG;;IACpE,KAAK,CAAC,CAAC,GAAG,aAAa,CACpB,MAAM,EAAE,CAAC,GAAK,CAAC,CAAC,UAAU,CAAC,OAAO;MAClC,GAAG,EAAE,CAAC,GAAK,CAAC,CAAC,KAAK,CAAC,CAAG,IAAE,CAAC;;IAC5B,MAAM,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC;AAClC,CAAC;SAEQ,4BAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC;IAC5B,iCAAE,CAAC,aAAa,CAAC,mCAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAI;AACtD,CAAC;SAEe,yCAAc,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;IAC1E,KAAK,CAAC,aAAa,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC,GAAK,IAAI,CAAC,KAAK,CAAC,yCAAO,CAAC,CAAC,EAAE,GAAG;;IACpE,KAAK,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,EAC3B,GAAG,EAAE,CAAC,GAAM,CAAC,CAAC,UAAU,IAAI,OAAO,CAAC,CAAC,EAAE,OAAO,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;MACvE,CAAC,CAAC;IAEJ,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAK,yCAAO,CAAC,CAAC,EAAE,GAAG;;IACrC,4BAAM,CAAC,QAAQ,EAAE,CAAC;AACpB,CAAC;SAEe,yCAAW,CACzB,SAAS,EACT,OAAO,EACP,OAAO,EACP,QAAQ,EACR,GAAG,EACH,QAAQ,EACR,CAAC;IACD,4BAAM,CACJ,QAAQ,EACR,SAAS,CAAC,MAAM,CAAC,yCAAO,IAAI,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,QAAQ,IAAI,GAAG;AAErE,CAAC;;;;kDD9DwC,OAAO,EAAE,CAAC;IACjD,OAAO,GAAG,CAAC;QACT,aAAa,KAAK,iCAAE,CAAC,OAAO,GAAG,UAAU;WACtC,OAAO;IACZ,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,qBAAO,CAAC,CAAU,WAC1B,QAAQ,CACP,CAA8E,+EAE/E,OAAO,EAAE,IAAI,GAAK,CAAC;mBACL,CAAC;gBACP,GAAe;YAApB,EAAE,KAAG,GAAe,GAAf,IAAI,CAAC,UAAU,cAAf,GAAe,KAAf,IAAI,CAAJ,CAAoB,GAApB,IAAI,CAAJ,CAAoB,GAApB,GAAe,CAAG,CAAC,IAAG,CAAC;gBAC1B,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,8FAA8F;gBAEtG,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YACD,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YACjC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAG;YAEzC,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAG,OAAK,OAAO,CAAC,QAAQ,CAAC,CAAG,KAC/C,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,8DAA8D;YAIxE,yCAAe,CAAC,OAAO,CAAC,aAAa;YAErC,KAAK,CAAC,CAAC,WAAC,QAAQ,EAAC,CAAC,GAAG,KAAK,CAAC,sBAAM,CAAC,CAAC;gBACjC,IAAI,EAAE,CAAU;gBAChB,IAAI,EAAE,CAAU;gBAChB,OAAO,EAAE,CAAkB;YAC7B,CAAC;YAED,yCAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,aAAa;YAE3C,KAAK,CAAC,QAAQ,GAAG,iCAAE,CAChB,YAAY,CAAC,mCAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,GAC/C,QAAQ;YACX,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAI;YAErC,EAAE,EACA,wCAAY,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,EAAE,OAAO,EAAE,yCAAO,CAAC,QAAQ,IACnE,CAAC;gBACD,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,oGAAoG;gBAE5G,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YAED,KAAK,CAAC,SAAS,GAAG,yCAAgB;YAElC,yCAAW,CACT,SAAS,EACT,OAAO,EACP,OAAO,EACP,SAAS,EACT,yCAAO,CAAC,QAAQ,GAChB,OAAO,CAAC,aAAa;YAGvB,OAAO,CAAC,GAAG,CAAC,oCAAK,CAAC,0BAA0B,EAAE,SAAS,CAAC,CAAC;QAC3D,CAAC,IACE,IAAI,EAAE,EAAE,GAAK,CAAC;QAAA,CAAC,EACf,KAAK,EAAE,GAAG,GAAK,CAAC;YACf,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,OAAO,CAAC,6BAA6B;QAEvE,CAAC;IACL,CAAC;AACL,CAAC;;;;;;;;;;kDG9EoC,OAAO,EAAE,CAAC;IAC7C,OAAO,GAAG,CAAC;QACT,aAAa,KAAK,iCAAE,CAAC,OAAO,GAAG,UAAU;WACtC,OAAO;IACZ,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,qBAAO,CAAC,CAAM,OACtB,QAAQ,CAAC,CAAyB,0BAClC,OAAO,EAAE,IAAI,GAAK,CAAC;mBACL,CAAC;YACZ,EAAE,EAAE,iCAAE,CAAC,UAAU,CAAC,mCAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC;gBACvD,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,0DAA0D;gBAElE,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YAED,KAAK,CAAC,CAAC,WAAC,QAAQ,EAAC,CAAC,GAAG,KAAK,CAAC,sBAAM,CAAC,CAAC;gBACjC,IAAI,EAAE,CAAU;gBAChB,IAAI,EAAE,CAAU;gBAChB,OAAO,EAAE,CAA2B;YACtC,CAAC;YAED,iCAAE,CAAC,aAAa,CACd,mCAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,GAClC,yCAAO,CAAC,CAAW,YAAE,yCAAO,CAAC,QAAQ;QAEzC,CAAC,IACE,IAAI,EAAE,EAAE,GAAK,CAAC;QAAA,CAAC,EACf,KAAK,EAAE,GAAG,GAAK,CAAC;YACf,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,OAAO,CAAC,6BAA6B;QAEvE,CAAC;IACL,CAAC;AACL,CAAC;;;;;;;;;;;;;;eEzCqB,yCAAc,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;IACtE,EAAE,EAAE,OAAO,EAAE,CAAC;QACZ,KAAK,CAAC,IAAI,GAAG,wCAAY,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,EAAE,OAAO,EAAE,GAAG;QACnE,EAAE,GAAG,IAAI,EAAE,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,oCAAK,CAAC,oCAAoC;YACtD,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,CAAC;qBAAC,OAAO;qBAAE,OAAO;QAAC,CAAC;IAC7B,CAAC,MAAM,CAAC;QACN,KAAK,CAAC,mBAAmB,GAAG,yCAAuB,CACjD,SAAS,CAAC,KAAK,CAAC,CAAC,GACjB,OAAO,EACP,GAAG;QAEL,EAAE,GAAG,mBAAmB,EAAE,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,oCAAK,CAAC,mCAAmC;YACrD,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC;QAED,EAAE,EAAE,mBAAmB,CAAC,MAAM,KAAK,CAAC,IAAI,mBAAmB,CAAC,CAAC,MAAM,CAAG,IACpE,MAAM,CAAC,CAAC;qBAAC,OAAO;YAAE,OAAO,EAAE,CAAG;QAAC,CAAC;QAGlC,KAAK,CAAC,CAAC,SAAC,MAAM,EAAC,CAAC,GAAG,KAAK,CAAC,sBAAM,CAAC,CAAC;YAC/B,IAAI,EAAE,CAAQ;YACd,IAAI,EAAE,CAAQ;YACd,OAAO,EAAE,CAAgD;YACzD,OAAO,EAAE,mBAAmB;QAC9B,CAAC;QAED,MAAM,CAAC,CAAC;qBAAC,OAAO;YAAE,OAAO,EAAE,MAAM;QAAC,CAAC;IACrC,CAAC;AACH,CAAC;;;kDDxBoC,OAAO,EAAE,CAAC;IAC7C,OAAO,GAAG,CAAC;QACT,aAAa,KAAK,iCAAE,CAAC,OAAO,GAAG,UAAU;WACtC,OAAO;IACZ,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,qBAAO,CAAC,CAAM,OAAE,QAAQ,CAAC,CAAiB,kBAAE,OAAO,EAAE,IAAI,GAAK,CAAC;mBAC3D,CAAC;gBACP,GAAe;YAApB,EAAE,KAAG,GAAe,GAAf,IAAI,CAAC,UAAU,cAAf,GAAe,KAAf,IAAI,CAAJ,CAAoB,GAApB,IAAI,CAAJ,CAAoB,GAApB,GAAe,CAAG,CAAC,IAAG,CAAC;gBAC1B,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,0FAA0F;gBAElG,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YACD,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YACjC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAE;YAExC,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAG,OAAK,OAAO,CAAC,QAAQ,CAAC,CAAG,KAC/C,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,8DAA8D;YAIxE,yCAAe,CAAC,OAAO,CAAC,aAAa;YAErC,KAAK,CAAC,CAAC,WAAC,QAAQ,EAAC,CAAC,GAAG,KAAK,CAAC,sBAAM,CAAC,CAAC;gBACjC,IAAI,EAAE,CAAU;gBAChB,IAAI,EAAE,CAAU;gBAChB,OAAO,EAAE,CAAkB;YAC7B,CAAC;YAED,yCAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,aAAa;YAE3C,KAAK,CAAC,QAAQ,GAAG,iCAAE,CAChB,YAAY,CAAC,mCAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,GAC/C,QAAQ;YACX,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAI;YAErC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,SAAS,GAAE,OAAO,EAAE,SAAS,EAAC,CAAC,GAAG,KAAK,CAAC,yCAAc,CACrE,SAAS,EACT,OAAO,EACP,OAAO,EACP,yCAAO,CAAC,QAAQ;YAGlB,KAAK,CAAC,IAAI,GAAG,wCAAY,CACvB,SAAS,EACT,SAAS,EACT,SAAS,EACT,yCAAO,CAAC,QAAQ;YAGlB,EAAE,GAAG,IAAI,EAAE,CAAC;gBACV,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,oDAAoD,EAAE,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;gBAEtF,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YAED,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAG,IAAE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAG,IAAE,CAAC;QAEhE,CAAC,IACE,IAAI,EAAE,EAAE,GAAK,CAAC;QAAA,CAAC,EACf,KAAK,EAAE,GAAG,GAAK,CAAC;YACf,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,OAAO,CAAC,6BAA6B;QAEvE,CAAC;IACL,CAAC;AACH,CAAC;;;;;;;;;;;;kDEtEsC,OAAO,EAAE,CAAC;IAC/C,OAAO,GAAG,CAAC;QACT,aAAa,KAAK,iCAAE,CAAC,OAAO,GAAG,UAAU;WACtC,OAAO;IACZ,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,qBAAO,CAAC,CAAQ,SAAE,QAAQ,CAAC,CAAmB,oBAAE,OAAO,EAAE,IAAI,GAAK,CAAC;mBAC/D,CAAC;gBACP,GAAe;YAApB,EAAE,KAAG,GAAe,GAAf,IAAI,CAAC,UAAU,cAAf,GAAe,KAAf,IAAI,CAAJ,CAAoB,GAApB,IAAI,CAAJ,CAAoB,GAApB,GAAe,CAAG,CAAC,IAAG,CAAC;gBAC1B,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,4FAA4F;gBAEpG,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YACD,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YACjC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAE;YAExC,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAG,OAAK,OAAO,CAAC,QAAQ,CAAC,CAAG,KAC/C,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,8DAA8D;YAIxE,yCAAe,CAAC,OAAO,CAAC,aAAa;YAErC,KAAK,CAAC,CAAC,WAAC,QAAQ,EAAC,CAAC,GAAG,KAAK,CAAC,sBAAM,CAAC,CAAC;gBACjC,IAAI,EAAE,CAAU;gBAChB,IAAI,EAAE,CAAU;gBAChB,OAAO,EAAE,CAAkB;YAC7B,CAAC;YAED,yCAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,aAAa;YAE3C,KAAK,CAAC,QAAQ,GAAG,iCAAE,CAChB,YAAY,CAAC,mCAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,GAC/C,QAAQ;YACX,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAI;YAErC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,SAAS,GAAE,OAAO,EAAE,SAAS,EAAC,CAAC,GAAG,KAAK,CAAC,yCAAc,CACrE,SAAS,EACT,OAAO,EACP,OAAO,EACP,yCAAO,CAAC,QAAQ;YAGlB,KAAK,CAAC,CAAC,UAAC,OAAO,EAAC,CAAC,GAAG,KAAK,CAAC,sBAAM,CAAC,CAAC;gBAChC,IAAI,EAAE,CAAS;gBACf,IAAI,EAAE,CAAS;gBACf,OAAO,EAAE,oCAAK,CAAC,kDAAkD,EAAE,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAC7F,CAAC;YAED,EAAE,EAAE,OAAO,EAAE,CAAC;gBACZ,yCAAc,CACZ,SAAS,EACT,SAAS,EACT,SAAS,EACT,yCAAO,CAAC,QAAQ,GAChB,OAAO,CAAC,aAAa;gBAEvB,OAAO,CAAC,GAAG,CAAC,oCAAK,CAAC,4BAA0B;YAC5C,CAAD,MACC,OAAO,CAAC,GAAG,CAAC,oCAAK,CAAC,+BAA8B;QAEpD,CAAC,IACE,IAAI,EAAE,EAAE,GAAK,CAAC;QAAA,CAAC,EACf,KAAK,EAAE,GAAG,GAAK,CAAC;YACf,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,OAAO,CAAC,6BAA6B;QAEvE,CAAC;IACL,CAAC;AACH,CAAC;;;;;;;;;;;kDCnEqC,OAAO,EAAE,CAAC;IAC9C,OAAO,GAAG,CAAC;QACT,aAAa,KAAK,iCAAE,CAAC,OAAO,GAAG,UAAU;WACtC,OAAO;IACZ,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,qBAAO,CAAC,CAAO,QACvB,QAAQ,CAAC,CAA6C,8CACtD,KAAK,CAAC,CAA6C,8CACnD,OAAO,EAAE,IAAI,GAAK,CAAC;mBACL,CAAC;gBACR,GAAe;YAAnB,EAAE,IAAE,GAAe,GAAf,IAAI,CAAC,UAAU,cAAf,GAAe,KAAf,IAAI,CAAJ,CAAuB,GAAvB,IAAI,CAAJ,CAAuB,GAAvB,GAAe,CAAE,MAAM,IAAG,CAAC,EAAE,CAAC;gBAChC,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,+FAA+F;gBAEvG,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YACD,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YACjC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAG;YAEvE,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAG,OAAK,OAAO,CAAC,QAAQ,CAAC,CAAG,KAC/C,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,8DAA8D;YAIxE,yCAAe,CAAC,OAAO,CAAC,aAAa;YAErC,KAAK,CAAC,CAAC,WAAC,QAAQ,EAAC,CAAC,GAAG,KAAK,CAAC,sBAAM,CAAC,CAAC;gBACjC,IAAI,EAAE,CAAU;gBAChB,IAAI,EAAE,CAAU;gBAChB,OAAO,EAAE,CAAkB;YAC7B,CAAC;YAED,yCAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,aAAa;YAE3C,KAAK,CAAC,QAAQ,GAAG,iCAAE,CAChB,YAAY,CAAC,mCAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,GAC/C,QAAQ;YACX,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAI;YAErC,EAAE,EACA,wCAAY,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,EAAE,OAAO,EAAE,yCAAO,CAAC,QAAQ,IACnE,CAAC;gBACD,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,oGAAoG;gBAE5G,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;YAED,yCAAW,CACT,SAAS,EACT,OAAO,EACP,OAAO,EACP,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,GAC1C,yCAAO,CAAC,QAAQ,GAChB,OAAO,CAAC,aAAa;YAGvB,OAAO,CAAC,GAAG,CAAC,oCAAK,CAAC,kCAA8B;QAClD,CAAC,IACE,IAAI,EAAE,EAAE,GAAK,CAAC;QAAA,CAAC,EACf,KAAK,EAAE,GAAG,GAAK,CAAC;YACf,OAAO,CAAC,GAAG,CACT,oCAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,OAAO,CAAC,6BAA6B;QAEvE,CAAC;IACL,CAAC;AACL,CAAC;;;ARzED,KAAK,CAAC,mCAAa,MAAM,iCAAE,CAAC,OAAO,GAAG,UAAU;AAEhD,KAAK,CAAC,0BAAI,GAAG,GAAG,CAAC,qBAAO,CAAC,CAAM,OAC5B,QAAQ,CAAC,CAAsB,uBAC/B,MAAM,CAAC,CAAG,IAAE,CAAC;IACZ,KAAK,EAAE,CAAC;QAAA,CAAS;IAAA,CAAC;IAClB,IAAI,EAAE,CAAS;IACf,WAAW,EAAE,CAA6B;AAC5C,CAAC,EACA,OAAO,CAAC,wCAAY,CAAC,CAAC;IAAC,aAAa,EAAE,mCAAa;AAAC,CAAC,GACrD,OAAO,CAAC,wCAAgB,CAAC,CAAC;IAAC,aAAa,EAAE,mCAAa;AAAC,CAAC,GACzD,OAAO,CAAC,wCAAY,CAAC,CAAC;IAAC,aAAa,EAAE,mCAAa;AAAC,CAAC,GACrD,OAAO,CAAC,wCAAc,CAAC,CAAC;IAAC,aAAa,EAAE,mCAAa;AAAC,CAAC,GACvD,OAAO,CAAC,wCAAa,CAAC,CAAC;IAAC,aAAa,EAAE,mCAAa;AAAC,CAAC,GACtD,cAAc,GACd,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAE7B,EAAE,EAAE,0BAAI,IAAI,0BAAI,CAAC,CAAC,EAChB,OAAO,CAAC,GAAG,CAAC,sDAAiB,CAAC,SAAS","sources":["src/index.js","src/commands/generate.js","src/utils.js","src/cryptography.js","src/commands/init.js","src/commands/view.js","src/interface.js","src/commands/remove.js","src/commands/store.js"],"sourcesContent":["import os from 'os';\n\nimport { Command } from 'tauris';\nimport getPackageVersion from '@jsbits/get-package-version';\n\nimport command_generate from './commands/generate';\nimport command_init from './commands/init';\nimport command_view from './commands/view';\nimport command_remove from './commands/remove';\nimport command_store from './commands/store';\n\nconst PASSFILE_PATH = `${os.homedir()}/.passfile`;\n\nconst argv = new Command('pass')\n  .describe('CLI password manager')\n  .option('v', {\n    alias: ['version'],\n    type: 'boolean',\n    description: 'Display version information',\n  })\n  .command(command_init({ PASSFILE_PATH: PASSFILE_PATH }))\n  .command(command_generate({ PASSFILE_PATH: PASSFILE_PATH }))\n  .command(command_view({ PASSFILE_PATH: PASSFILE_PATH }))\n  .command(command_remove({ PASSFILE_PATH: PASSFILE_PATH }))\n  .command(command_store({ PASSFILE_PATH: PASSFILE_PATH }))\n  .demandArgument()\n  .parse(process.argv.slice(2));\n\nif (argv && argv.v) {\n  console.log(getPackageVersion(__dirname));\n}\n","import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\n\nimport chalk from 'chalk';\nimport { Command } from 'tauris';\nimport { prompt } from 'enquirer';\n\nimport {\n  requirePassFile,\n  checkMaster,\n  generatePassword,\n  findPassword,\n  addPassword,\n} from '../utils';\nimport { makeKey } from '../cryptography';\n\nexport default function command_generate(options) {\n  options = {\n    PASSFILE_PATH: `${os.homedir()}/.passfile`,\n    ...options,\n  };\n\n  return new Command('generate')\n    .describe(\n      'Generate a new password for a service & keyword and save it in your passfile'\n    )\n    .handler((argv) => {\n      (async () => {\n        if (!argv.parameters?.[0]) {\n          console.log(\n            chalk`{red.bold Error:} You must provide a service (and optionally a keyword) to generate a password`\n          );\n          process.exit(1);\n        }\n        const service = argv.parameters[0];\n        const keyword = argv.parameters[1] || '*';\n\n        if (service.includes(' ') || keyword.includes(' ')) {\n          console.log(\n            chalk`{red.bold Error:} Keywords and services may not contain spaces`\n          );\n        }\n\n        requirePassFile(options.PASSFILE_PATH);\n\n        const { password } = await prompt({\n          type: 'password',\n          name: 'password',\n          message: 'Master password:',\n        });\n\n        checkMaster(password, options.PASSFILE_PATH);\n\n        const passFile = fs\n          .readFileSync(path.resolve(options.PASSFILE_PATH))\n          .toString();\n        const passwords = passFile.split('\\n');\n\n        if (\n          findPassword(passwords.slice(1), service, keyword, makeKey(password))\n        ) {\n          console.log(\n            chalk`{red.bold Error:} There's already a password with this service and keyword. Try a different keyword.`\n          );\n          process.exit(1);\n        }\n\n        const generated = generatePassword();\n\n        addPassword(\n          passwords,\n          service,\n          keyword,\n          generated,\n          makeKey(password),\n          options.PASSFILE_PATH\n        );\n\n        console.log(chalk`Generated password: {cyan ${generated}}`);\n      })()\n        .then((_v) => {})\n        .catch((err) => {\n          console.log(\n            chalk`{red.bold Error:} ${err.message} {gray (unhandled exception)}`\n          );\n        });\n    });\n}\n","import chalk from 'chalk';\nimport { randomFillSync } from 'crypto';\nimport fs from 'fs';\nimport path from 'path';\nimport { makeKey, decrypt, encrypt } from './cryptography';\n\nexport function requirePassFile(file) {\n  if (!fs.existsSync(path.resolve(file))) {\n    console.log(\n      chalk`{red.bold Error:} No passfile exists. Please run {cyan pass init} first.`\n    );\n    process.exit(1);\n  }\n}\n\nexport function checkMaster(password, file) {\n  requirePassFile(file);\n\n  const key = makeKey(password);\n  const testLine = fs\n    .readFileSync(path.resolve(file))\n    .toString()\n    .split('\\n')[0];\n\n  try {\n    const output = decrypt(testLine, key);\n    if (output !== '\"valid key\"') throw new Error();\n  } catch (e) {\n    console.log(chalk`{red.bold Error:} Invalid password. Please try again`);\n    process.exit(1);\n  }\n}\n\nexport function generatePassword() {\n  const data = randomFillSync(Buffer.alloc(8));\n  return data.toString('hex');\n}\n\nexport function findPassword(passwords, service, keyword, key) {\n  const dec_passwords = passwords.map((p) => JSON.parse(decrypt(p, key)));\n  return (\n    dec_passwords.find((p) => p.startsWith(`${service} ${keyword}`)) || null\n  );\n}\n\nexport function findPasswordsForService(passwords, service, key) {\n  const dec_passwords = passwords.map((p) => JSON.parse(decrypt(p, key)));\n  const r = dec_passwords\n    .filter((p) => p.startsWith(service))\n    .map((p) => p.split(' ')[1]);\n  return r.length === 0 ? null : r;\n}\n\nfunction _write(passfile, r) {\n  fs.writeFileSync(path.resolve(passfile), r.join('\\n'));\n}\n\nexport function removePassword(passwords, service, keyword, key, passfile) {\n  const dec_passwords = passwords.map((p) => JSON.parse(decrypt(p, key)));\n  const r = dec_passwords.reduce(\n    (acc, v) => (v.startsWith(`${service} ${keyword}`) ? acc : acc.concat(v)),\n    []\n  );\n  const e = r.map((p) => encrypt(p, key));\n  _write(passfile, e);\n}\n\nexport function addPassword(\n  passwords,\n  service,\n  keyword,\n  password,\n  key,\n  passfile\n) {\n  _write(\n    passfile,\n    passwords.concat(encrypt(`${service} ${keyword} ${password}`, key))\n  );\n}\n","import {\n  scryptSync,\n  createCipheriv,\n  randomFillSync,\n  createDecipheriv,\n} from 'crypto';\n\nexport function makeKey(password) {\n  const key = scryptSync(password, 'salt', 24);\n\n  return key;\n}\n\nexport function encrypt(data, key) {\n  const iv = randomFillSync(new Uint8Array(16));\n  const cipher = createCipheriv('aes-192-cbc', key, iv);\n\n  const _c = cipher.update(JSON.stringify(data), 'utf8', 'hex');\n  const encrypted = _c + cipher.final('hex');\n\n  const ivBuffer = Buffer.from(iv.buffer);\n\n  return encrypted + ' ' + ivBuffer.toString('hex');\n}\n\nexport function decrypt(data, key) {\n  const content = data.split(' ')[0];\n  const ivString = data.split(' ')[1];\n\n  const ivBuffer = Buffer.from(ivString, 'hex');\n  const iv = uint8arrayFromBuffer(ivBuffer);\n\n  const cipher = createDecipheriv('aes-192-cbc', key, iv);\n\n  const _c = cipher.update(content, 'hex', 'utf8');\n  const decrypted = _c + cipher.final('utf8');\n\n  return decrypted;\n}\n\nfunction uint8arrayFromBuffer(buffer) {\n  const a = new Uint8Array(buffer.length);\n  for (let i = 0; i < buffer.length; i++) a[i] = buffer[i];\n  return a;\n}\n","import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\n\nimport chalk from 'chalk';\nimport { Command } from 'tauris';\nimport { prompt } from 'enquirer';\n\nimport { encrypt, makeKey } from '../cryptography';\n\nexport default function command_init(options) {\n  options = {\n    PASSFILE_PATH: `${os.homedir()}/.passfile`,\n    ...options,\n  };\n\n  return new Command('init')\n    .describe('Initiliase the passfile')\n    .handler((argv) => {\n      (async () => {\n        if (fs.existsSync(path.resolve(options.PASSFILE_PATH))) {\n          console.log(\n            chalk`{red.bold Error:} There already is an initialised passfile`\n          );\n          process.exit(1);\n        }\n\n        const { password } = await prompt({\n          type: 'password',\n          name: 'password',\n          message: 'Choose a master password:',\n        });\n\n        fs.writeFileSync(\n          path.resolve(options.PASSFILE_PATH),\n          encrypt('valid key', makeKey(password))\n        );\n      })()\n        .then((_v) => {})\n        .catch((err) => {\n          console.log(\n            chalk`{red.bold Error:} ${err.message} {gray (unhandled exception)}`\n          );\n        });\n    });\n}\n","import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\n\nimport chalk from 'chalk';\nimport { Command } from 'tauris';\nimport { prompt } from 'enquirer';\n\nimport { makeKey } from '../cryptography';\nimport { findPassword, requirePassFile, checkMaster } from '../utils';\nimport { selectPassword } from '../interface';\n\nexport default function command_init(options) {\n  options = {\n    PASSFILE_PATH: `${os.homedir()}/.passfile`,\n    ...options,\n  };\n\n  return new Command('view').describe('View a password').handler((argv) => {\n    (async () => {\n      if (!argv.parameters?.[0]) {\n        console.log(\n          chalk`{red.bold Error:} You must provide a service (and optionally a keyword) to view a password`\n        );\n        process.exit(1);\n      }\n      const service = argv.parameters[0];\n      const keyword = argv.parameters[1] || '';\n\n      if (service.includes(' ') || keyword.includes(' ')) {\n        console.log(\n          chalk`{red.bold Error:} Keywords and services may not contain spaces`\n        );\n      }\n\n      requirePassFile(options.PASSFILE_PATH);\n\n      const { password } = await prompt({\n        type: 'password',\n        name: 'password',\n        message: 'Master password:',\n      });\n\n      checkMaster(password, options.PASSFILE_PATH);\n\n      const passFile = fs\n        .readFileSync(path.resolve(options.PASSFILE_PATH))\n        .toString();\n      const passwords = passFile.split('\\n');\n\n      const { service: p_service, keyword: p_keyword } = await selectPassword(\n        passwords,\n        service,\n        keyword,\n        makeKey(password)\n      );\n\n      const pass = findPassword(\n        passwords,\n        p_service,\n        p_keyword,\n        makeKey(password)\n      );\n\n      if (!pass) {\n        console.log(\n          chalk`{red.bold Error:} Could not find password for {cyan ${p_service} ${p_keyword}}`\n        );\n        process.exit(1);\n      }\n\n      console.log(\n        chalk`Password: {cyan ${pass.split(' ').slice(2).join(' ')}}`\n      );\n    })()\n      .then((_v) => {})\n      .catch((err) => {\n        console.log(\n          chalk`{red.bold Error:} ${err.message} {gray (unhandled exception)}`\n        );\n      });\n  });\n}\n","import chalk from 'chalk';\nimport { prompt } from 'enquirer';\nimport { findPassword, findPasswordsForService } from './utils';\n\nexport async function selectPassword(passwords, service, keyword, key) {\n  if (keyword) {\n    const pass = findPassword(passwords.slice(1), service, keyword, key);\n    if (!pass) {\n      console.log(chalk`{red.bold Error:} Password not found`);\n      process.exit(1);\n    }\n    return { service, keyword };\n  } else {\n    const passwordsForService = findPasswordsForService(\n      passwords.slice(1),\n      service,\n      key\n    );\n    if (!passwordsForService) {\n      console.log(chalk`{red.bold Error:} Service not found`);\n      process.exit(1);\n    }\n\n    if (passwordsForService.length === 1 && passwordsForService[0] === '*') {\n      return { service, keyword: '*' };\n    }\n\n    const { choice } = await prompt({\n      type: 'select',\n      name: 'choice',\n      message: 'There are multiple passwords for this service:',\n      choices: passwordsForService,\n    });\n\n    return { service, keyword: choice };\n  }\n}\n","import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\n\nimport chalk from 'chalk';\nimport { Command } from 'tauris';\nimport { prompt } from 'enquirer';\n\nimport { makeKey } from '../cryptography';\nimport { requirePassFile, checkMaster, removePassword } from '../utils';\nimport { selectPassword } from '../interface';\n\nexport default function command_remove(options) {\n  options = {\n    PASSFILE_PATH: `${os.homedir()}/.passfile`,\n    ...options,\n  };\n\n  return new Command('remove').describe('Delete a password').handler((argv) => {\n    (async () => {\n      if (!argv.parameters?.[0]) {\n        console.log(\n          chalk`{red.bold Error:} You must provide a service (and optionally a keyword) to remove a password`\n        );\n        process.exit(1);\n      }\n      const service = argv.parameters[0];\n      const keyword = argv.parameters[1] || '';\n\n      if (service.includes(' ') || keyword.includes(' ')) {\n        console.log(\n          chalk`{red.bold Error:} Keywords and services may not contain spaces`\n        );\n      }\n\n      requirePassFile(options.PASSFILE_PATH);\n\n      const { password } = await prompt({\n        type: 'password',\n        name: 'password',\n        message: 'Master password:',\n      });\n\n      checkMaster(password, options.PASSFILE_PATH);\n\n      const passFile = fs\n        .readFileSync(path.resolve(options.PASSFILE_PATH))\n        .toString();\n      const passwords = passFile.split('\\n');\n\n      const { service: p_service, keyword: p_keyword } = await selectPassword(\n        passwords,\n        service,\n        keyword,\n        makeKey(password)\n      );\n\n      const { confirm } = await prompt({\n        name: 'confirm',\n        type: 'confirm',\n        message: chalk`Are you sure you want to delete your password for ${p_service} ${p_keyword}?`,\n      });\n\n      if (confirm) {\n        removePassword(\n          passwords,\n          p_service,\n          p_keyword,\n          makeKey(password),\n          options.PASSFILE_PATH\n        );\n        console.log(chalk`{green ✔} Password deleted`);\n      } else {\n        console.log(chalk`{red.bold ×} Operation aborted`);\n      }\n    })()\n      .then((_v) => {})\n      .catch((err) => {\n        console.log(\n          chalk`{red.bold Error:} ${err.message} {gray (unhandled exception)}`\n        );\n      });\n  });\n}\n","import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\n\nimport chalk from 'chalk';\nimport { Command } from 'tauris';\nimport { prompt } from 'enquirer';\n\nimport {\n  findPassword,\n  requirePassFile,\n  checkMaster,\n  addPassword,\n} from '../utils';\nimport { makeKey } from '../cryptography';\n\nexport default function command_store(options) {\n  options = {\n    PASSFILE_PATH: `${os.homedir()}/.passfile`,\n    ...options,\n  };\n\n  return new Command('store')\n    .describe('Store an existing password in your passfile')\n    .usage('pass store <service> [<keyword>] <password>')\n    .handler((argv) => {\n      (async () => {\n        if (argv.parameters?.length < 2) {\n          console.log(\n            chalk`{red.bold Error:} You must provide a service, optional keyword and password to run this command`\n          );\n          process.exit(1);\n        }\n        const service = argv.parameters[0];\n        const keyword = argv.parameters.length === 3 ? argv.parameters[1] : '*';\n\n        if (service.includes(' ') || keyword.includes(' ')) {\n          console.log(\n            chalk`{red.bold Error:} Keywords and services may not contain spaces`\n          );\n        }\n\n        requirePassFile(options.PASSFILE_PATH);\n\n        const { password } = await prompt({\n          type: 'password',\n          name: 'password',\n          message: 'Master password:',\n        });\n\n        checkMaster(password, options.PASSFILE_PATH);\n\n        const passFile = fs\n          .readFileSync(path.resolve(options.PASSFILE_PATH))\n          .toString();\n        const passwords = passFile.split('\\n');\n\n        if (\n          findPassword(passwords.slice(1), service, keyword, makeKey(password))\n        ) {\n          console.log(\n            chalk`{red.bold Error:} There's already a password with this service and keyword. Try a different keyword.`\n          );\n          process.exit(1);\n        }\n\n        addPassword(\n          passwords,\n          service,\n          keyword,\n          argv.parameters[argv.parameters.length - 1],\n          makeKey(password),\n          options.PASSFILE_PATH\n        );\n\n        console.log(chalk`{green ✔️} Added your password`);\n      })()\n        .then((_v) => {})\n        .catch((err) => {\n          console.log(\n            chalk`{red.bold Error:} ${err.message} {gray (unhandled exception)}`\n          );\n        });\n    });\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}